from lxml import etree

def name(element):
    return str(element.tag).split('}')[1]

def psm_from_query(query):
    """Analyze an Element object with spectrum query and generate a
    dictionary with a peptide spectrum match.    
    """

    PSM = dict(query.attrib)         #attributes of <spectrum_query>
    PSM.update(query[0][0].attrib)   #attributes of <search_hit>

    # Store alternative proteins as a list of dictionaries.
    proteins = []
    proteins.append(
        {"protein":         PSM.pop("protein"),
         "protein_descr":   PSM.pop("protein_descr", ""),
         "num_tol_term":    PSM.pop("num_tol_term"),
         "peptide_prev_aa": PSM.pop("peptide_prev_aa"),
         "peptide_next_aa": PSM.pop("peptide_next_aa")})

    # Store a list of modifications.
    modifications = []
    for child in query[0][0]:
        if name(child) == "search_score":
            PSM[child.attrib["name"]] = child.attrib["value"]
        elif name(child) == "alternative_protein":
            proteins.append(child.attrib)
        elif name(child) == "modification_info":
            modifications.append(child[0].attrib)
        else:
            print "Unexpected child named %s" % name(child)

    PSM["proteins"] = proteins
    PSM["modifications"] = modifications

    # Generate the modified sequence of a peptide.
    shift = 0
    PSM["non_mod_seq"] = PSM["peptide"]
    if len(PSM["modifications"]):
        for mod in PSM["modifications"]:
            PSM["peptide"] = (
                PSM["peptide"][:int(mod["position"]) + shift] + '[' 
                + mod["mass"].split('.')[0] + ']' 
                + PSM["peptide"][int(mod["position"]) + shift:])
            shift += len(mod["mass"]) + 2
    return PSM
    
def psm_list(source):
    """Parse source and return a list of peptide-spectrum matches from
    the ``source``.

    The ``source`` can be any of the following:    
    - a file name/path
    - a file object
    - a file-like object
    - a URL using the HTTP or FTP protocol
    """

    parser = etree.XMLParser(remove_comments=True, ns_clean=True) 
    tree = etree.parse(pepxml, parser=parser)

    PSMs = []
    for elem in tree.iter():
        if name(elem) == "spectrum_query":
            PSMs.append(psm_from_query(elem))
    return PSMs
    
if __name__ == "__main__":
    pass
